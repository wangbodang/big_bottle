// ✅ RBAC 权限管理后端模板结构

// ========== 1. 数据库实体 ==========
// SysUser.java
@Data
@TableName("sys_user")
public class SysUser {
    private Long id;
    private String username;
    private String password;
    private String email;
    private Integer status;
    private Date createTime;
}

// SysRole.java
@Data
@TableName("sys_role")
public class SysRole {
    private Long id;
    private String name;
    private String code;
    private String description;
}

// SysPermission.java
@Data
@TableName("sys_permission")
public class SysPermission {
    private Long id;
    private String name;
    private String code;
    private String url;
}

// SysUserRole.java
@Data
@TableName("sys_user_role")
public class SysUserRole {
    private Long userId;
    private Long roleId;
}

// SysRolePermission.java
@Data
@TableName("sys_role_permission")
public class SysRolePermission {
    private Long roleId;
    private Long permissionId;
}


// ========== 2. Mapper 接口 ==========
@Mapper
public interface SysUserMapper extends BaseMapper<SysUser> {
    SysUser selectByUsername(String username);
}

@Mapper
public interface SysRoleMapper extends BaseMapper<SysRole> {
    List<String> selectRoleCodesByUserId(Long userId);
}

@Mapper
public interface SysPermissionMapper extends BaseMapper<SysPermission> {
    List<String> selectPermissionsByUserId(Long userId);
}


// ========== 3. LoginUser 封装 ==========
@Data
@AllArgsConstructor
@NoArgsConstructor
public class LoginUser {
    private Long uid;
    private String username;
    private String role; // 可简化为第一个角色
    private List<String> permissions;
    private String email;
    private Boolean isAdmin;
}


// ========== 4. 登录服务 ==========
@Service
public class AuthService {
    @Autowired private SysUserMapper userMapper;
    @Autowired private SysRoleMapper roleMapper;
    @Autowired private SysPermissionMapper permissionMapper;
    @Autowired private JwtUtil jwtUtil;

    public String login(String username, String rawPassword) {
        SysUser user = userMapper.selectByUsername(username);
        if (user == null || !user.getPassword().equals(rawPassword)) {
            throw new BusinessException("用户名或密码错误");
        }

        List<String> roles = roleMapper.selectRoleCodesByUserId(user.getId());
        List<String> perms = permissionMapper.selectPermissionsByUserId(user.getId());

        LoginUser loginUser = new LoginUser(
                user.getId(),
                user.getUsername(),
                roles.isEmpty() ? null : roles.get(0),
                perms,
                user.getEmail(),
                roles.contains("ADMIN")
        );

        return jwtUtil.generateToken(loginUser);
    }
}


// ========== 5. AuthController 登录接口 ==========
@RestController
@RequestMapping("/auth")
public class AuthController {

    @Autowired private AuthService authService;

    @PostMapping("/login")
    public ApiResponse<String> login(@RequestParam String username, @RequestParam String password) {
        String token = authService.login(username, password);
        return ApiResponse.success(token);
    }
}


// ========== 6. SQL 建表语句（简略版） ==========
-- sys_user
CREATE TABLE sys_user (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(64),
    password VARCHAR(128),
    email VARCHAR(128),
    status INT,
    create_time DATETIME
);

-- sys_role
CREATE TABLE sys_role (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(64),
    code VARCHAR(64),
    description VARCHAR(255)
);

-- sys_permission
CREATE TABLE sys_permission (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(64),
    code VARCHAR(64),
    url VARCHAR(255)
);

-- sys_user_role
CREATE TABLE sys_user_role (
    user_id BIGINT,
    role_id BIGINT
);

-- sys_role_permission
CREATE TABLE sys_role_permission (
    role_id BIGINT,
    permission_id BIGINT
);
