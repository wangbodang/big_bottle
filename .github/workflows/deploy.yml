name: Deploy Backend to EC2

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 拉取代码
        uses: actions/checkout@v4 # 更新 checkout 版本

      - name: 设置 Java 环境
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # 或其他你需要的发行版
          java-version: '8' # 指定你的 Java 版本

      - name: 构建 Spring Boot 项目并获取 JAR 名称
        id: build # 给这个步骤一个 id，方便引用其输出
        run: |
          chmod +x mvnw
          ./mvnw clean package -DskipTests
          # 查找 target 目录下唯一的 jar 文件名并设置为输出
          JAR_FILE=$(ls target/*.jar | head -n 1)
          echo "jar_file=$JAR_FILE" >> $GITHUB_OUTPUT

      # 在 '构建 Spring Boot 项目并获取 JAR 名称' 步骤之后添加:
      - name: 检查 JAR 文件输出变量的值
        run: |
          echo "The determined JAR file is: ${{ steps.build.outputs.jar_file }}"

      - name: 上传到 EC2
        uses: appleboy/scp-action@v0.1.4 # 更新 scp 版本 (或更新的版本)
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: ${{ steps.build.outputs.jar_file }} # 使用上一步输出的精确 JAR 文件名
          target: "/home/ubuntu/bigbottle"
          strip_components: 1 # <--- 尝试加回这一行
          # strip_components: 1 # 当 source 是具体文件时，不需要 strip_components

      - name: 远程重启服务 (检查端口监听版)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            JAR_NAME=$(basename ${{ steps.build.outputs.jar_file }})
            DEPLOY_DIR="/home/ubuntu/bigbottle" # 确认用户和路径
            # 如果需要，修复 JAR_PATH (例如，如果它在 target 子目录)
            # JAR_PATH="$DEPLOY_DIR/$JAR_NAME"
            JAR_PATH="$DEPLOY_DIR/$JAR_NAME" # 假设根据上次调试结果，它在 target 下
            LOG_FILE="$DEPLOY_DIR/app.log"
            APP_PORT=8083 # <--- 在这里替换成你的应用端口号!
            
            echo "尝试关闭旧服务（如果有）..."
            (pkill -f "java.*$JAR_NAME" || echo "无旧服务可杀") && true
            echo "等待旧服务关闭..."
            sleep 5
            echo "清理旧日志（可选）"
            > $LOG_FILE
            
            echo "启动新服务: $JAR_PATH"
            setsid nohup java -jar $JAR_PATH --spring.config.additional-location=file:/home/ubuntu/bigbottle/config/application.yml > $LOG_FILE 2>&1 < /dev/null &
            
            echo "等待服务启动 (最多等待 60 秒)..."
            COUNTER=0
            MAX_WAIT=12 # 总共等待 12 * 5 = 60 秒
            SUCCESS=false
            while [ $COUNTER -lt $MAX_WAIT ]; do
              echo "检查进程是否存在..."
              if pgrep -f "java.*$JAR_NAME"; then
                echo "进程已找到，检查端口 $APP_PORT 是否监听..."
                # 使用 ss 命令检查指定端口是否处于 LISTEN 状态
                # -H: 不打印表头, -t: TCP, -l: Listening, -n: 数字端口, -p: 进程信息
                # grep LISTEN 确保状态是监听
                if ss -H -tlpn 'sport = :'$APP_PORT | grep LISTEN; then
                  echo "✅ 端口 $APP_PORT 正在监听"
                  SUCCESS=true
                  break
                else
                  echo "端口 $APP_PORT 尚未监听，继续等待..."
                fi
              else
                echo "Java 进程未找到，继续等待..."
              fi
              sleep 5
              COUNTER=$((COUNTER+1))
            done
            
            if [ "$SUCCESS" = false ]; then
              echo "❌ 服务在 $MAX_WAIT * 5 秒内未能成功启动或端口未监听"
              echo "查看日志: $LOG_FILE"
              tail -n 50 $LOG_FILE || echo "无法读取日志文件"
              exit 1
            fi
            
            echo "✅ 完成部署"